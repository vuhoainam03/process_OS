/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package process_management;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.annotation.Native;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author vuhoa
 */
public class ShowProcessing extends javax.swing.JFrame implements ActionListener {
    
    

    private List<ProcessInfo> processlist;
    private DefaultTableModel model;

    /**
     * Creates new form ShowProcessing
     */
    public ShowProcessing() {
        initComponents();

    }

    public ShowProcessing(List<ProcessInfo> processlist) {
        setLocationRelativeTo(null);

        initComponents();
        this.processlist = processlist;
        model = (DefaultTableModel) tblProcessing.getModel();
        //thêm sự kiện
        btnKillProcess.addActionListener(this);
        btnRefresh.addActionListener(this);
        btnExit.addActionListener(this);
        btnRunProcess.addActionListener(this);
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProcessing = new javax.swing.JTable();
        btnKillProcess = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtImageName = new javax.swing.JTextField();
        btnRunProcess = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblProcessing.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Tên tiến trình", "Mã tiến trình", "Tên phiên ", "Số phiên", "Bộ nhớ đã dùng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProcessing);

        btnKillProcess.setText("Kết thúc tiến trình");

        btnRefresh.setText("Làm mới");

        btnExit.setText("Thoát");

        jLabel1.setText("Tên tiến trình:");

        btnRunProcess.setText("Chạy");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnKillProcess)
                        .addGap(48, 48, 48)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(btnExit)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtImageName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(btnRunProcess)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtImageName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRunProcess))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnKillProcess)
                    .addComponent(btnRefresh)
                    .addComponent(btnExit))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShowProcessing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnKillProcess;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRunProcess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProcessing;
    private javax.swing.JTextField txtImageName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        var obj = e.getSource();
       
        if (obj.equals(btnKillProcess)) {
               int rowChoice = tblProcessing.getSelectedRow();
            if(rowChoice<0) {
                JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn tiến trình cần xóa");
                return;
            }
            int option = JOptionPane.showConfirmDialog(rootPane, "Bạn có muốn hủy tiến trình này không ?");
            if (option == JOptionPane.OK_OPTION) {
                handleKillProcess();
            }
        }else if(obj.equals(btnRefresh)) {
            refreshAllProcess( );
        }else if(obj.equals(btnExit)) {
           dispose();
        }else if(obj.equals(btnRunProcess)) {
            startProcess();
        }
    }

    private void showData() {
        model.setRowCount(0);
        for (var process : processlist) {
            Object row[] = new Object[]{process.getImageName(), process.getProcessId(), process.getSessionName(), process.getSessionNumber(), process.getMemoryUsage()};
            model.addRow(row);
        }
    }

    private void handleKillProcess() {
        try {
            int rowChoice = tblProcessing.getSelectedRow();

//            int processId = processlist.get(rowChoice).getProcessId();
            model.removeRow(rowChoice);

//lấy tiến trình dựa trên hàng đã được click bởi người dùng trên table -> lấy index của list
            String processName = processlist.get(rowChoice).getImageName();
            //thực hiện lệnh kill tiến trình
            /* taskkill: lệnh kill tiến trình
            /F : ép buộc xóa( force kill)
            /IM: xóa dựa trên tên tiến trình - image name
            */
            Process process = Runtime.getRuntime().exec("taskkill /F /IM " + processName);
            int result = process.waitFor();
            if(result==0) {
                JOptionPane.showMessageDialog(rootPane, "Tiến trình có tên:  " + processName + " đã xóa thành công!");
            }else {
                JOptionPane.showMessageDialog(rootPane, "Không thể xóa: " + processName+". Có lỗi xảy ra!");
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(ShowProcessing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ShowProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
        

    }

    


    private void refreshAllProcess() {
 try {
            Process process = Runtime.getRuntime().exec(System.getenv("windir") + "\\system32\\" + "tasklist.exe");

            // Đọc kết quả trả về từ lệnh tasklist
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;

            processlist.clear();
           model.setRowCount(0);
            // Đọc và hiển thị thông tin về từng tiến trình
            while ((line = reader.readLine()) != null) {
                //không đọc tiêu đề
                if(line.startsWith("Image Name") || line.isEmpty() || line.startsWith("====")) {
                    continue;
                }
                ProcessInfo processInfo = new ProcessInfo(line);
                processlist.add(processInfo);
            }
            showData();

            // Đóng luồng đọc
            reader.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra");
        }       }

    private void startProcess() {
        try {
            
            //lấy image name của tiến trình và cắt bỏ khoảng trắng
            String imageName = txtImageName.getText().trim();
            if(imageName.isEmpty()  ) {
                JOptionPane.showMessageDialog(rootPane,"Vui lòng nhập tên tiến trình");
                return ;
            }
            // tạo đối tượng processBuilder để có thể gọi đến phương thức "start()"
            ProcessBuilder processBuilder = new ProcessBuilder(imageName);
            
            //start
            Process process= processBuilder.start();
            int status = process.waitFor();
            if(status==0    ) {
                JOptionPane.showMessageDialog(rootPane, "Chạy tiến trình: " + imageName + " thành công");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra.Vui lòng kiểm tra lại tiến trình bạn vừa nhập");
        } catch (InterruptedException ex) {
                            JOptionPane.showMessageDialog(rootPane, "Không thể chạy tiến trình " );

        }
        
    }
}
